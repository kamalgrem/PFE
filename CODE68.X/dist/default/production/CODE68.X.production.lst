

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat May 08 03:43:35 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.31
    21                           ; Generated 13/10/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175                           
   176                           	psect	nvBANK0
   177  0028                     __pnvBANK0:
   178  0028                     _charachter:
   179  0028                     	ds	1
   180  0019                     _TXREG	set	25
   181  001E                     _ADRESH	set	30
   182  001F                     _ADCON0	set	31
   183  00C6                     _RX9	set	198
   184  00C4                     _CREN	set	196
   185  00C7                     _SPEN	set	199
   186  00FA                     _GO_nDONE	set	250
   187  0087                     _TRISC	set	135
   188  0088                     _TRISD	set	136
   189  0086                     _TRISB	set	134
   190  0099                     _SPBRG	set	153
   191  009F                     _ADCON1	set	159
   192  04C6                     _TX9	set	1222
   193  04C5                     _TXEN	set	1221
   194  04C4                     _SYNC	set	1220
   195  04C2                     _BRGH	set	1218
   196  043F                     _TRISC7	set	1087
   197  043E                     _TRISC6	set	1086
   198                           
   199                           	psect	cinit
   200  07F6                     start_initialization:	
   201                           ; #config settings
   202                           
   203  07F6                     __initialization:
   204                           
   205                           ; Clear objects allocated to COMMON
   206  07F6  01FD               	clrf	__pbssCOMMON& (0+127)
   207                           
   208                           ; Clear objects allocated to BANK0
   209  07F7  1283               	bcf	3,5	;RP0=0, select bank0
   210  07F8  1303               	bcf	3,6	;RP1=0, select bank0
   211  07F9  01A5               	clrf	__pbssBANK0& (0+127)
   212  07FA  01A6               	clrf	(__pbssBANK0+1)& (0+127)
   213  07FB  01A7               	clrf	(__pbssBANK0+2)& (0+127)
   214  07FC                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217  07FC                     __end_of__initialization:
   218  07FC  0183               	clrf	3
   219  07FD  120A  118A  2F75   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	bssCOMMON
   222  007D                     __pbssCOMMON:
   223  007D                     _channel:
   224  007D                     	ds	1
   225                           
   226                           	psect	bssBANK0
   227  0025                     __pbssBANK0:
   228  0025                     _somme:
   229  0025                     	ds	2
   230  0027                     _data:
   231  0027                     	ds	1
   232                           
   233                           	psect	cstackCOMMON
   234  0070                     __pcstackCOMMON:
   235  0070                     ?_ADC_Init:
   236  0070                     ??_ADC_Init:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_ADC:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_Initialize_UART:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ??_Initialize_UART:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_UART_send_char:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ??_UART_send_char:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_main:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_ADC_Read:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?___awdiv:	
   261                           ; 2 bytes @ 0x0
   262                           
   263  0070                     UART_send_char@bt:	
   264                           ; 2 bytes @ 0x0
   265                           
   266  0070                     ADC_Read@channel:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ___awdiv@divisor:	
   270                           ; 2 bytes @ 0x0
   271                           
   272                           
   273                           ; 2 bytes @ 0x0
   274  0070                     	ds	2
   275  0072                     ??_ADC_Read:
   276  0072                     ___awdiv@dividend:	
   277                           ; 1 bytes @ 0x2
   278                           
   279                           
   280                           ; 2 bytes @ 0x2
   281  0072                     	ds	2
   282  0074                     ??___awdiv:
   283                           
   284                           ; 1 bytes @ 0x4
   285  0074                     	ds	1
   286  0075                     ___awdiv@counter:
   287                           
   288                           ; 1 bytes @ 0x5
   289  0075                     	ds	1
   290  0076                     ___awdiv@sign:
   291                           
   292                           ; 1 bytes @ 0x6
   293  0076                     	ds	1
   294  0077                     ___awdiv@quotient:
   295                           
   296                           ; 2 bytes @ 0x7
   297  0077                     	ds	2
   298  0079                     ??_ADC:
   299                           
   300                           ; 1 bytes @ 0x9
   301  0079                     	ds	2
   302  007B                     ADC@i:
   303                           
   304                           ; 2 bytes @ 0xB
   305  007B                     	ds	2
   306                           
   307                           	psect	cstackBANK0
   308  0020                     __pcstackBANK0:
   309  0020                     ??_main:
   310                           
   311                           ; 1 bytes @ 0x0
   312  0020                     	ds	3
   313  0023                     main@i:
   314                           
   315                           ; 2 bytes @ 0x3
   316  0023                     	ds	2
   317                           
   318                           	psect	maintext
   319  0775                     __pmaintext:	
   320 ;;
   321 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   322 ;;
   323 ;; *************** function _main *****************
   324 ;; Defined at:
   325 ;;		line 78 in file "CODE68.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;		None
   328 ;; Auto vars:     Size  Location     Type
   329 ;;  i               2    3[BANK0 ] int 
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   334 ;; Tracked objects:
   335 ;;		On entry : B00/0
   336 ;;		On exit  : 300/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   339 ;;      Params:         0       0       0       0       0
   340 ;;      Locals:         0       2       0       0       0
   341 ;;      Temps:          0       3       0       0       0
   342 ;;      Totals:         0       5       0       0       0
   343 ;;Total ram usage:        5 bytes
   344 ;; Hardware stack levels required when called:    2
   345 ;; This function calls:
   346 ;;		_ADC
   347 ;;		_ADC_Init
   348 ;;		_Initialize_UART
   349 ;;		_UART_send_char
   350 ;; This function is called by:
   351 ;;		Startup code after reset
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           
   356                           ;psect for function _main
   357  0775                     _main:
   358                           
   359                           ;CODE68.c: 80: TRISB=0x00;
   360                           
   361                           ;incstack = 0
   362                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   363  0775  1683               	bsf	3,5	;RP0=1, select bank1
   364  0776  0186               	clrf	6	;volatile
   365                           
   366                           ;CODE68.c: 81: TRISD=0x00;
   367  0777  0188               	clrf	8	;volatile
   368                           
   369                           ;CODE68.c: 83: TRISC=0x00;
   370  0778  0187               	clrf	7	;volatile
   371                           
   372                           ;CODE68.c: 85: Initialize_UART();
   373  0779  120A  118A  2682  120A  118A  	fcall	_Initialize_UART
   374                           
   375                           ;CODE68.c: 86: ADC_Init();
   376  077E  120A  118A  267C  120A  118A  	fcall	_ADC_Init
   377                           
   378                           ;CODE68.c: 87: charachter=0x61;
   379  0783  3061               	movlw	97
   380  0784  1283               	bcf	3,5	;RP0=0, select bank0
   381  0785  00A0               	movwf	??_main
   382  0786  0820               	movf	??_main,w
   383  0787  00A8               	movwf	_charachter
   384                           
   385                           ;CODE68.c: 88: _delay((unsigned long)((600)*(4000000/4000.0)));
   386  0788  3004               	movlw	4
   387  0789  1283               	bcf	3,5	;RP0=0, select bank0
   388  078A  1303               	bcf	3,6	;RP1=0, select bank0
   389  078B  00A2               	movwf	??_main+2
   390  078C  300C               	movlw	12
   391  078D  00A1               	movwf	??_main+1
   392  078E  3033               	movlw	51
   393  078F  00A0               	movwf	??_main
   394  0790                     u397:
   395  0790  0BA0               	decfsz	??_main,f
   396  0791  2F90               	goto	u397
   397  0792  0BA1               	decfsz	??_main+1,f
   398  0793  2F90               	goto	u397
   399  0794  0BA2               	decfsz	??_main+2,f
   400  0795  2F90               	goto	u397
   401                           
   402                           ;CODE68.c: 89: _delay((unsigned long)((100)*(4000000/4000.0)));
   403  0796  3082               	movlw	130
   404  0797  1283               	bcf	3,5	;RP0=0, select bank0
   405  0798  1303               	bcf	3,6	;RP1=0, select bank0
   406  0799  00A1               	movwf	??_main+1
   407  079A  30DD               	movlw	221
   408  079B  00A0               	movwf	??_main
   409  079C                     u407:
   410  079C  0BA0               	decfsz	??_main,f
   411  079D  2F9C               	goto	u407
   412  079E  0BA1               	decfsz	??_main+1,f
   413  079F  2F9C               	goto	u407
   414  07A0                     l876:
   415                           
   416                           ;CODE68.c: 92: {;CODE68.c: 93: for(channel=0;channel<4;channel++)
   417  07A0  01FD               	clrf	_channel
   418  07A1                     L1:
   419  07A1  3004               	movlw	4
   420  07A2  027D               	subwf	_channel,w
   421  07A3  1803               	btfsc	3,0
   422  07A4  2FA0               	goto	l876
   423                           
   424                           ;CODE68.c: 94: {;CODE68.c: 95: ADC();
   425  07A5  120A  118A  26D6  120A  118A  	fcall	_ADC
   426                           
   427                           ;CODE68.c: 96: for(int i=0;i<2;i++)
   428  07AA  01A3               	clrf	main@i
   429  07AB  01A4               	clrf	main@i+1
   430  07AC                     l888:
   431                           
   432                           ;CODE68.c: 97: {;CODE68.c: 98: UART_send_char(charachter);
   433  07AC  1283               	bcf	3,5	;RP0=0, select bank0
   434  07AD  1303               	bcf	3,6	;RP1=0, select bank0
   435  07AE  0828               	movf	_charachter,w
   436  07AF  120A  118A  2678  120A  118A  	fcall	_UART_send_char
   437                           
   438                           ;CODE68.c: 99: _delay((unsigned long)((10)*(4000000/4000.0)));
   439  07B4  300D               	movlw	13
   440  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   441  07B6  1303               	bcf	3,6	;RP1=0, select bank0
   442  07B7  00A1               	movwf	??_main+1
   443  07B8  30FB               	movlw	251
   444  07B9  00A0               	movwf	??_main
   445  07BA                     u417:
   446  07BA  0BA0               	decfsz	??_main,f
   447  07BB  2FBA               	goto	u417
   448  07BC  0BA1               	decfsz	??_main+1,f
   449  07BD  2FBA               	goto	u417
   450                           
   451                           ;CODE68.c: 100: charachter++;
   452  07BE  3001               	movlw	1
   453  07BF  1283               	bcf	3,5	;RP0=0, select bank0
   454  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   455  07C1  00A0               	movwf	??_main
   456  07C2  0820               	movf	??_main,w
   457  07C3  07A8               	addwf	_charachter,f
   458                           
   459                           ;CODE68.c: 101: if(charachter>0x68)
   460  07C4  3069               	movlw	105
   461  07C5  0228               	subwf	_charachter,w
   462  07C6  1C03               	skipc
   463  07C7  2FCC               	goto	l78
   464                           
   465                           ;CODE68.c: 102: charachter=0x61;
   466  07C8  3061               	movlw	97
   467  07C9  00A0               	movwf	??_main
   468  07CA  0820               	movf	??_main,w
   469  07CB  00A8               	movwf	_charachter
   470  07CC                     l78:
   471  07CC  3001               	movlw	1
   472  07CD  07A3               	addwf	main@i,f
   473  07CE  1803               	skipnc
   474  07CF  0AA4               	incf	main@i+1,f
   475  07D0  3000               	movlw	0
   476  07D1  07A4               	addwf	main@i+1,f
   477  07D2  0824               	movf	main@i+1,w
   478  07D3  3A80               	xorlw	128
   479  07D4  00FF               	movwf	127
   480  07D5  3080               	movlw	128
   481  07D6  027F               	subwf	127,w
   482  07D7  1D03               	skipz
   483  07D8  2FDB               	goto	u375
   484  07D9  3002               	movlw	2
   485  07DA  0223               	subwf	main@i,w
   486  07DB                     u375:
   487  07DB  1C03               	skipc
   488  07DC  2FAC               	goto	l888
   489                           
   490                           ;CODE68.c: 103: };CODE68.c: 104: UART_send_char(data);
   491  07DD  1283               	bcf	3,5	;RP0=0, select bank0
   492  07DE  1303               	bcf	3,6	;RP1=0, select bank0
   493  07DF  0827               	movf	_data,w
   494  07E0  120A  118A  2678  120A  118A  	fcall	_UART_send_char
   495                           
   496                           ;CODE68.c: 105: _delay((unsigned long)((100)*(4000000/4000.0)));
   497  07E5  3082               	movlw	130
   498  07E6  1283               	bcf	3,5	;RP0=0, select bank0
   499  07E7  1303               	bcf	3,6	;RP1=0, select bank0
   500  07E8  00A1               	movwf	??_main+1
   501  07E9  30DD               	movlw	221
   502  07EA  00A0               	movwf	??_main
   503  07EB                     u427:
   504  07EB  0BA0               	decfsz	??_main,f
   505  07EC  2FEB               	goto	u427
   506  07ED  0BA1               	decfsz	??_main+1,f
   507  07EE  2FEB               	goto	u427
   508  07EF  3001               	movlw	1
   509  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   510  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   511  07F2  00A0               	movwf	??_main
   512  07F3  0820               	movf	??_main,w
   513  07F4  07FD               	addwf	_channel,f
   514  07F5  2FA1               	goto	L1
   515  07F6                     __end_of_main:
   516                           
   517                           	psect	text1
   518  0678                     __ptext1:	
   519 ;; *************** function _UART_send_char *****************
   520 ;; Defined at:
   521 ;;		line 73 in file "CODE68.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;  bt              1    wreg     unsigned char 
   524 ;; Auto vars:     Size  Location     Type
   525 ;;  bt              1    0[COMMON] unsigned char 
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg
   530 ;; Tracked objects:
   531 ;;		On entry : 300/0
   532 ;;		On exit  : 300/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   535 ;;      Params:         0       0       0       0       0
   536 ;;      Locals:         1       0       0       0       0
   537 ;;      Temps:          0       0       0       0       0
   538 ;;      Totals:         1       0       0       0       0
   539 ;;Total ram usage:        1 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; This function calls:
   542 ;;		Nothing
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           
   549                           ;psect for function _UART_send_char
   550  0678                     _UART_send_char:
   551                           
   552                           ;incstack = 0
   553                           ; Regs used in _UART_send_char: [wreg]
   554                           ;UART_send_char@bt stored from wreg
   555  0678  00F0               	movwf	UART_send_char@bt
   556                           
   557                           ;CODE68.c: 75: TXREG = bt;
   558  0679  0870               	movf	UART_send_char@bt,w
   559  067A  0099               	movwf	25	;volatile
   560  067B  0008               	return
   561  067C                     __end_of_UART_send_char:
   562                           
   563                           	psect	text2
   564  0682                     __ptext2:	
   565 ;; *************** function _Initialize_UART *****************
   566 ;; Defined at:
   567 ;;		line 48 in file "CODE68.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg
   576 ;; Tracked objects:
   577 ;;		On entry : B00/100
   578 ;;		On exit  : B00/0
   579 ;;		Unchanged: 800/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   581 ;;      Params:         0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0
   584 ;;      Totals:         0       0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels used:    1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           
   595                           ;psect for function _Initialize_UART
   596  0682                     _Initialize_UART:
   597                           
   598                           ;CODE68.c: 51: TRISC6 = 0;
   599                           
   600                           ;incstack = 0
   601                           ; Regs used in _Initialize_UART: [wreg]
   602  0682  1307               	bcf	7,6	;volatile
   603                           
   604                           ;CODE68.c: 52: TRISC7 = 1;
   605  0683  1787               	bsf	7,7	;volatile
   606                           
   607                           ;CODE68.c: 56: SPBRG = ((4000000/16)/9600) - 1;
   608  0684  3019               	movlw	25
   609  0685  0099               	movwf	25	;volatile
   610                           
   611                           ;CODE68.c: 57: BRGH = 1;
   612  0686  1518               	bsf	24,2	;volatile
   613                           
   614                           ;CODE68.c: 59: SYNC = 0;
   615  0687  1218               	bcf	24,4	;volatile
   616                           
   617                           ;CODE68.c: 60: SPEN = 1;
   618  0688  1283               	bcf	3,5	;RP0=0, select bank0
   619  0689  1798               	bsf	24,7	;volatile
   620                           
   621                           ;CODE68.c: 63: TXEN = 1;
   622  068A  1683               	bsf	3,5	;RP0=1, select bank1
   623  068B  1698               	bsf	24,5	;volatile
   624                           
   625                           ;CODE68.c: 64: CREN = 1;
   626  068C  1283               	bcf	3,5	;RP0=0, select bank0
   627  068D  1618               	bsf	24,4	;volatile
   628                           
   629                           ;CODE68.c: 68: TX9 = 0;
   630  068E  1683               	bsf	3,5	;RP0=1, select bank1
   631  068F  1318               	bcf	24,6	;volatile
   632                           
   633                           ;CODE68.c: 69: RX9 = 0;
   634  0690  1283               	bcf	3,5	;RP0=0, select bank0
   635  0691  1318               	bcf	24,6	;volatile
   636  0692  0008               	return
   637  0693                     __end_of_Initialize_UART:
   638                           
   639                           	psect	text3
   640  067C                     __ptext3:	
   641 ;; *************** function _ADC_Init *****************
   642 ;; Defined at:
   643 ;;		line 15 in file "CODE68.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;		None
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg
   652 ;; Tracked objects:
   653 ;;		On entry : B00/0
   654 ;;		On exit  : B00/100
   655 ;;		Unchanged: 800/0
   656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   657 ;;      Params:         0       0       0       0       0
   658 ;;      Locals:         0       0       0       0       0
   659 ;;      Temps:          0       0       0       0       0
   660 ;;      Totals:         0       0       0       0       0
   661 ;;Total ram usage:        0 bytes
   662 ;; Hardware stack levels used:    1
   663 ;; This function calls:
   664 ;;		Nothing
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _ADC_Init
   672  067C                     _ADC_Init:
   673                           
   674                           ;CODE68.c: 17: ADCON0 = 0x81;
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _ADC_Init: [wreg]
   678  067C  3081               	movlw	129
   679  067D  009F               	movwf	31	;volatile
   680                           
   681                           ;CODE68.c: 18: ADCON1 = 0x43;
   682  067E  3043               	movlw	67
   683  067F  1683               	bsf	3,5	;RP0=1, select bank1
   684  0680  009F               	movwf	31	;volatile
   685  0681  0008               	return
   686  0682                     __end_of_ADC_Init:
   687                           
   688                           	psect	text4
   689  06D6                     __ptext4:	
   690 ;; *************** function _ADC *****************
   691 ;; Defined at:
   692 ;;		line 37 in file "CODE68.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;		None
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  i               2   11[COMMON] int 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 300/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   706 ;;      Params:         0       0       0       0       0
   707 ;;      Locals:         2       0       0       0       0
   708 ;;      Temps:          2       0       0       0       0
   709 ;;      Totals:         4       0       0       0       0
   710 ;;Total ram usage:        4 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; Hardware stack levels required when called:    1
   713 ;; This function calls:
   714 ;;		_ADC_Read
   715 ;;		___awdiv
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           
   722                           ;psect for function _ADC
   723  06D6                     _ADC:
   724                           
   725                           ;CODE68.c: 39: for(int i=0; i<10;i++)
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _ADC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   729  06D6  01FB               	clrf	ADC@i
   730  06D7  01FC               	clrf	ADC@i+1
   731  06D8                     l832:
   732                           
   733                           ;CODE68.c: 40: {;CODE68.c: 41: somme=somme+ADC_Read(channel);;
   734  06D8  087D               	movf	_channel,w
   735  06D9  00F9               	movwf	??_ADC
   736  06DA  01FA               	clrf	??_ADC+1
   737  06DB  0879               	movf	??_ADC,w
   738  06DC  00F0               	movwf	ADC_Read@channel
   739  06DD  087A               	movf	??_ADC+1,w
   740  06DE  00F1               	movwf	ADC_Read@channel+1
   741  06DF  120A  118A  2693  120A  118A  	fcall	_ADC_Read
   742  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   743  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   744  06E6  0825               	movf	_somme,w
   745  06E7  0770               	addwf	?_ADC_Read,w
   746  06E8  00A5               	movwf	_somme
   747  06E9  0826               	movf	_somme+1,w
   748  06EA  1803               	skipnc
   749  06EB  0A26               	incf	_somme+1,w
   750  06EC  0771               	addwf	?_ADC_Read+1,w
   751  06ED  00A6               	movwf	_somme+1
   752                           
   753                           ;CODE68.c: 42: _delay((unsigned long)((10)*(4000000/4000.0)));
   754  06EE  300D               	movlw	13
   755  06EF  00FA               	movwf	??_ADC+1
   756  06F0  30FB               	movlw	251
   757  06F1  00F9               	movwf	??_ADC
   758  06F2                     u437:
   759  06F2  0BF9               	decfsz	??_ADC,f
   760  06F3  2EF2               	goto	u437
   761  06F4  0BFA               	decfsz	??_ADC+1,f
   762  06F5  2EF2               	goto	u437
   763  06F6  2EF7               	nop2
   764  06F7  3001               	movlw	1
   765  06F8  07FB               	addwf	ADC@i,f
   766  06F9  1803               	skipnc
   767  06FA  0AFC               	incf	ADC@i+1,f
   768  06FB  3000               	movlw	0
   769  06FC  07FC               	addwf	ADC@i+1,f
   770  06FD  087C               	movf	ADC@i+1,w
   771  06FE  3A80               	xorlw	128
   772  06FF  00FF               	movwf	127
   773  0700  3080               	movlw	128
   774  0701  027F               	subwf	127,w
   775  0702  1D03               	skipz
   776  0703  2F06               	goto	u345
   777  0704  300A               	movlw	10
   778  0705  027B               	subwf	ADC@i,w
   779  0706                     u345:
   780  0706  1C03               	skipc
   781  0707  2ED8               	goto	l832
   782                           
   783                           ;CODE68.c: 43: };CODE68.c: 44: data=somme/10;
   784  0708  300A               	movlw	10
   785  0709  00F0               	movwf	___awdiv@divisor
   786  070A  3000               	movlw	0
   787  070B  00F1               	movwf	___awdiv@divisor+1
   788  070C  1283               	bcf	3,5	;RP0=0, select bank0
   789  070D  1303               	bcf	3,6	;RP1=0, select bank0
   790  070E  0826               	movf	_somme+1,w
   791  070F  00F3               	movwf	___awdiv@dividend+1
   792  0710  0825               	movf	_somme,w
   793  0711  00F2               	movwf	___awdiv@dividend
   794  0712  120A  118A  271C   	fcall	___awdiv
   795  0715  0870               	movf	?___awdiv,w
   796  0716  00F9               	movwf	??_ADC
   797  0717  0879               	movf	??_ADC,w
   798  0718  00A7               	movwf	_data
   799                           
   800                           ;CODE68.c: 45: somme=0;
   801  0719  01A5               	clrf	_somme
   802  071A  01A6               	clrf	_somme+1
   803  071B  0008               	return
   804  071C                     __end_of_ADC:
   805                           
   806                           	psect	text5
   807  071C                     __ptext5:	
   808 ;; *************** function ___awdiv *****************
   809 ;; Defined at:
   810 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  divisor         2    0[COMMON] int 
   813 ;;  dividend        2    2[COMMON] int 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  quotient        2    7[COMMON] int 
   816 ;;  sign            1    6[COMMON] unsigned char 
   817 ;;  counter         1    5[COMMON] unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  2    0[COMMON] int 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 300/0
   824 ;;		On exit  : 300/0
   825 ;;		Unchanged: 300/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   827 ;;      Params:         4       0       0       0       0
   828 ;;      Locals:         4       0       0       0       0
   829 ;;      Temps:          1       0       0       0       0
   830 ;;      Totals:         9       0       0       0       0
   831 ;;Total ram usage:        9 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_ADC
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           
   841                           ;psect for function ___awdiv
   842  071C                     ___awdiv:
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   846  071C  01F6               	clrf	___awdiv@sign
   847  071D  1FF1               	btfss	___awdiv@divisor+1,7
   848  071E  2F26               	goto	l788
   849  071F  09F0               	comf	___awdiv@divisor,f
   850  0720  09F1               	comf	___awdiv@divisor+1,f
   851  0721  0AF0               	incf	___awdiv@divisor,f
   852  0722  1903               	skipnz
   853  0723  0AF1               	incf	___awdiv@divisor+1,f
   854  0724  01F6               	clrf	___awdiv@sign
   855  0725  0AF6               	incf	___awdiv@sign,f
   856  0726                     l788:
   857  0726  1FF3               	btfss	___awdiv@dividend+1,7
   858  0727  2F31               	goto	l794
   859  0728  09F2               	comf	___awdiv@dividend,f
   860  0729  09F3               	comf	___awdiv@dividend+1,f
   861  072A  0AF2               	incf	___awdiv@dividend,f
   862  072B  1903               	skipnz
   863  072C  0AF3               	incf	___awdiv@dividend+1,f
   864  072D  3001               	movlw	1
   865  072E  00F4               	movwf	??___awdiv
   866  072F  0874               	movf	??___awdiv,w
   867  0730  06F6               	xorwf	___awdiv@sign,f
   868  0731                     l794:
   869  0731  01F7               	clrf	___awdiv@quotient
   870  0732  01F8               	clrf	___awdiv@quotient+1
   871  0733  0870               	movf	___awdiv@divisor,w
   872  0734  0471               	iorwf	___awdiv@divisor+1,w
   873  0735  1903               	btfsc	3,2
   874  0736  2F68               	goto	l816
   875  0737  01F5               	clrf	___awdiv@counter
   876  0738  0AF5               	incf	___awdiv@counter,f
   877  0739                     l804:
   878  0739  1BF1               	btfsc	___awdiv@divisor+1,7
   879  073A  2F47               	goto	l806
   880  073B  3001               	movlw	1
   881  073C                     u275:
   882  073C  1003               	clrc
   883  073D  0DF0               	rlf	___awdiv@divisor,f
   884  073E  0DF1               	rlf	___awdiv@divisor+1,f
   885  073F  3EFF               	addlw	-1
   886  0740  1D03               	skipz
   887  0741  2F3C               	goto	u275
   888  0742  3001               	movlw	1
   889  0743  00F4               	movwf	??___awdiv
   890  0744  0874               	movf	??___awdiv,w
   891  0745  07F5               	addwf	___awdiv@counter,f
   892  0746  2F39               	goto	l804
   893  0747                     l806:
   894  0747  3001               	movlw	1
   895  0748                     u295:
   896  0748  1003               	clrc
   897  0749  0DF7               	rlf	___awdiv@quotient,f
   898  074A  0DF8               	rlf	___awdiv@quotient+1,f
   899  074B  3EFF               	addlw	-1
   900  074C  1D03               	skipz
   901  074D  2F48               	goto	u295
   902  074E  0871               	movf	___awdiv@divisor+1,w
   903  074F  0273               	subwf	___awdiv@dividend+1,w
   904  0750  1D03               	skipz
   905  0751  2F54               	goto	u305
   906  0752  0870               	movf	___awdiv@divisor,w
   907  0753  0272               	subwf	___awdiv@dividend,w
   908  0754                     u305:
   909  0754  1C03               	skipc
   910  0755  2F5D               	goto	l812
   911  0756  0870               	movf	___awdiv@divisor,w
   912  0757  02F2               	subwf	___awdiv@dividend,f
   913  0758  0871               	movf	___awdiv@divisor+1,w
   914  0759  1C03               	skipc
   915  075A  03F3               	decf	___awdiv@dividend+1,f
   916  075B  02F3               	subwf	___awdiv@dividend+1,f
   917  075C  1477               	bsf	___awdiv@quotient,0
   918  075D                     l812:
   919  075D  3001               	movlw	1
   920  075E                     u315:
   921  075E  1003               	clrc
   922  075F  0CF1               	rrf	___awdiv@divisor+1,f
   923  0760  0CF0               	rrf	___awdiv@divisor,f
   924  0761  3EFF               	addlw	-1
   925  0762  1D03               	skipz
   926  0763  2F5E               	goto	u315
   927  0764  3001               	movlw	1
   928  0765  02F5               	subwf	___awdiv@counter,f
   929  0766  1D03               	btfss	3,2
   930  0767  2F47               	goto	l806
   931  0768                     l816:
   932  0768  0876               	movf	___awdiv@sign,w
   933  0769  1903               	btfsc	3,2
   934  076A  2F70               	goto	l820
   935  076B  09F7               	comf	___awdiv@quotient,f
   936  076C  09F8               	comf	___awdiv@quotient+1,f
   937  076D  0AF7               	incf	___awdiv@quotient,f
   938  076E  1903               	skipnz
   939  076F  0AF8               	incf	___awdiv@quotient+1,f
   940  0770                     l820:
   941  0770  0878               	movf	___awdiv@quotient+1,w
   942  0771  00F1               	movwf	?___awdiv+1
   943  0772  0877               	movf	___awdiv@quotient,w
   944  0773  00F0               	movwf	?___awdiv
   945  0774  0008               	return
   946  0775                     __end_of___awdiv:
   947                           
   948                           	psect	text6
   949  0693                     __ptext6:	
   950 ;; *************** function _ADC_Read *****************
   951 ;; Defined at:
   952 ;;		line 21 in file "CODE68.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  channel         2    0[COMMON] unsigned int 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;		None
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2    0[COMMON] unsigned int 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   966 ;;      Params:         2       0       0       0       0
   967 ;;      Locals:         0       0       0       0       0
   968 ;;      Temps:          2       0       0       0       0
   969 ;;      Totals:         4       0       0       0       0
   970 ;;Total ram usage:        4 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; This function calls:
   973 ;;		Nothing
   974 ;; This function is called by:
   975 ;;		_ADC
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           
   980                           ;psect for function _ADC_Read
   981  0693                     _ADC_Read:
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
   985  0693  3000               	movlw	0
   986  0694  0271               	subwf	ADC_Read@channel+1,w
   987  0695  3003               	movlw	3
   988  0696  1903               	skipnz
   989  0697  0270               	subwf	ADC_Read@channel,w
   990  0698  1C03               	skipc
   991  0699  2EA0               	goto	l52
   992                           
   993                           ;CODE68.c: 23: channel+=1;
   994  069A  3001               	movlw	1
   995  069B  07F0               	addwf	ADC_Read@channel,f
   996  069C  1803               	skipnc
   997  069D  0AF1               	incf	ADC_Read@channel+1,f
   998  069E  3000               	movlw	0
   999  069F  07F1               	addwf	ADC_Read@channel+1,f
  1000  06A0                     l52:
  1001                           
  1002                           ;CODE68.c: 24: if(channel > 7)
  1003  06A0  3000               	movlw	0
  1004  06A1  0271               	subwf	ADC_Read@channel+1,w
  1005  06A2  3008               	movlw	8
  1006  06A3  1903               	skipnz
  1007  06A4  0270               	subwf	ADC_Read@channel,w
  1008  06A5  1C03               	skipc
  1009  06A6  2EAA               	goto	l768
  1010                           
  1011                           ;CODE68.c: 25: return 0;
  1012  06A7  01F0               	clrf	?_ADC_Read
  1013  06A8  01F1               	clrf	?_ADC_Read+1
  1014  06A9  0008               	return
  1015  06AA                     l768:
  1016                           
  1017                           ;CODE68.c: 27: ADCON0 &= 0x85;
  1018  06AA  3085               	movlw	133
  1019  06AB  00F2               	movwf	??_ADC_Read
  1020  06AC  0872               	movf	??_ADC_Read,w
  1021  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  1022  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  1023  06AF  059F               	andwf	31,f	;volatile
  1024                           
  1025                           ;CODE68.c: 28: ADCON0 |= channel<<3;
  1026  06B0  0870               	movf	ADC_Read@channel,w
  1027  06B1  00F2               	movwf	??_ADC_Read
  1028  06B2  3002               	movlw	2
  1029  06B3                     u225:
  1030  06B3  1003               	clrc
  1031  06B4  0DF2               	rlf	??_ADC_Read,f
  1032  06B5  3EFF               	addlw	-1
  1033  06B6  1D03               	skipz
  1034  06B7  2EB3               	goto	u225
  1035  06B8  1003               	clrc
  1036  06B9  0D72               	rlf	??_ADC_Read,w
  1037  06BA  00F3               	movwf	??_ADC_Read+1
  1038  06BB  0873               	movf	??_ADC_Read+1,w
  1039  06BC  049F               	iorwf	31,f	;volatile
  1040                           
  1041                           ;CODE68.c: 29: ADCON1=0x43;
  1042  06BD  3043               	movlw	67
  1043  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  1044  06BF  009F               	movwf	31	;volatile
  1045                           
  1046                           ;CODE68.c: 32: _delay((unsigned long)((2)*(4000000/4000.0)));
  1047  06C0  3003               	movlw	3
  1048  06C1  00F3               	movwf	??_ADC_Read+1
  1049  06C2  3097               	movlw	151
  1050  06C3  00F2               	movwf	??_ADC_Read
  1051  06C4                     u447:
  1052  06C4  0BF2               	decfsz	??_ADC_Read,f
  1053  06C5  2EC4               	goto	u447
  1054  06C6  0BF3               	decfsz	??_ADC_Read+1,f
  1055  06C7  2EC4               	goto	u447
  1056  06C8  2EC9               	nop2
  1057                           
  1058                           ;CODE68.c: 33: GO_nDONE = 1;
  1059  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  1060  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  1061  06CB  151F               	bsf	31,2	;volatile
  1062  06CC                     l55:	
  1063                           ;CODE68.c: 34: while(GO_nDONE);
  1064                           
  1065  06CC  191F               	btfsc	31,2	;volatile
  1066  06CD  2ECC               	goto	l55
  1067                           
  1068                           ;CODE68.c: 35: return (ADRESH);
  1069  06CE  081E               	movf	30,w	;volatile
  1070  06CF  00F2               	movwf	??_ADC_Read
  1071  06D0  01F3               	clrf	??_ADC_Read+1
  1072  06D1  0872               	movf	??_ADC_Read,w
  1073  06D2  00F0               	movwf	?_ADC_Read
  1074  06D3  0873               	movf	??_ADC_Read+1,w
  1075  06D4  00F1               	movwf	?_ADC_Read+1
  1076  06D5  0008               	return
  1077  06D6                     __end_of_ADC_Read:
  1078  007E                     btemp	set	126	;btemp
  1079  007E                     wtemp0	set	126
  1080                           
  1081                           	psect	config
  1082                           
  1083                           ;Config register CONFIG @ 0x2007
  1084                           ;	Oscillator Selection bits
  1085                           ;	FOSC = XT, XT oscillator
  1086                           ;	Watchdog Timer Enable bit
  1087                           ;	WDTE = OFF, WDT disabled
  1088                           ;	Power-up Timer Enable bit
  1089                           ;	PWRTE = ON, PWRT enabled
  1090                           ;	Brown-out Reset Enable bit
  1091                           ;	BOREN = ON, BOR enabled
  1092                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1093                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1094                           ;	Data EEPROM Memory Code Protection bit
  1095                           ;	CPD = OFF, Data EEPROM code protection off
  1096                           ;	Flash Program Memory Write Enable bits
  1097                           ;	WRT = 0x3, unprogrammed default
  1098                           ;	In-Circuit Debugger Mode bit
  1099                           ;	DEBUG = 0x1, unprogrammed default
  1100                           ;	Flash Program Memory Code Protection bit
  1101                           ;	CP = OFF, Code protection off
  1102  2007                     	org	8199
  1103  2007  3FF1               	dw	16369

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      5       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC
    _ADC->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     640
                                              0 BANK0      5     5      0
                                _ADC
                           _ADC_Init
                    _Initialize_UART
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (1) _UART_send_char                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC                                                  4     4      0     572
                                              9 COMMON     4     4      0
                           _ADC_Read
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC
     _ADC_Read
     ___awdiv
   _ADC_Init
   _Initialize_UART
   _UART_send_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      17       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      5       9       5       11.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      17      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat May 08 03:43:35 2021

                      l52 06A0                        l55 06CC                        l78 07CC  
            ___awdiv@sign 0076                       _ADC 06D6                       l820 0770  
                     l812 075D                       l804 0739                       l806 0747  
                     l816 0768                       l832 06D8                       l768 06AA  
                     l794 0731                       l788 0726                       l876 07A0  
                     l888 07AC                       u225 06B3                       u305 0754  
                     u315 075E                       u407 079C                       u345 0706  
                     u417 07BA                       u275 073C                       u427 07EB  
                     u437 06F2                       u447 06C4                       u295 0748  
                     u375 07DB                       u397 0790                       _RX9 00C6  
                     _TX9 04C6                      ADC@i 007B                      ?_ADC 0070  
                    _BRGH 04C2                      _CREN 00C4                      _SPEN 00C7  
                    _TXEN 04C5                      _SYNC 04C4                      _data 0027  
                    _main 0775                      btemp 007E          __end_of_ADC_Init 0682  
        __end_of_ADC_Read 06D6                      start 0000                     ??_ADC 0079  
                   ?_main 0070           __end_of___awdiv 0775           ___awdiv@divisor 0070  
         ___awdiv@counter 0075                     _SPBRG 0099                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _TXREG 0019  
                   _somme 0025                     main@i 0023                     status 0003  
                   wtemp0 007E           __initialization 07F6              __end_of_main 07F6  
                  ??_main 0020                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E          ___awdiv@dividend 0072                    _TRISC6 043E  
                  _TRISC7 043F                 ??___awdiv 0074           ADC_Read@channel 0070  
        ___awdiv@quotient 0077                 ?_ADC_Init 0070                 ?_ADC_Read 0070  
 __end_of__initialization 07FC            __pcstackCOMMON 0070  __size_of_Initialize_UART 0011  
              ??_ADC_Init 0070                ??_ADC_Read 0072                __pbssBANK0 0025  
              _charachter 0028                __pmaintext 0775   __size_of_UART_send_char 0004  
                 ___awdiv 071C                   _channel 007D                   __ptext1 0678  
                 __ptext2 0682                   __ptext3 067C                   __ptext4 06D6  
                 __ptext5 071C                   __ptext6 0693              __size_of_ADC 0046  
       ??_Initialize_UART 0070      end_of_initialization 07FC         __size_of_ADC_Init 0006  
       __size_of_ADC_Read 0043       start_initialization 07F6               __end_of_ADC 071C  
          _UART_send_char 0678    __end_of_UART_send_char 067C               __pbssCOMMON 007D  
               ___latbits 0002             __pcstackBANK0 0020                 __pnvBANK0 0028  
         _Initialize_UART 0682                  ?___awdiv 0070          UART_send_char@bt 0070  
         ?_UART_send_char 0070                  _ADC_Init 067C                  _ADC_Read 0693  
                _GO_nDONE 00FA   __end_of_Initialize_UART 0693          __size_of___awdiv 0059  
           __size_of_main 0081          ?_Initialize_UART 0070          ??_UART_send_char 0070  
